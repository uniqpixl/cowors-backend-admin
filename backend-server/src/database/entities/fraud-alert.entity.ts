import { UserEntity } from '@/auth/entities/user.entity';
import { BaseModel } from '@/database/models/base.model';
import { Column, Entity, Index, JoinColumn, ManyToOne } from 'typeorm';
import { EntityType } from '../../utils/id-generator.service';
import { BookingEntity } from './booking.entity';
import { KycVerificationEntity } from './kyc-verification.entity';

export enum FraudAlertType {
  DUPLICATE_IDENTITY = 'duplicate_identity',
  SUSPICIOUS_DOCUMENT = 'suspicious_document',
  WATCHLIST_MATCH = 'watchlist_match',
  DEVICE_FINGERPRINT = 'device_fingerprint',
  BEHAVIORAL_ANOMALY = 'behavioral_anomaly',
  PAYMENT_FRAUD = 'payment_fraud',
  ACCOUNT_TAKEOVER = 'account_takeover',
  SYNTHETIC_IDENTITY = 'synthetic_identity',
}

export enum FraudAlertSeverity {
  LOW = 'low',
  MEDIUM = 'medium',
  HIGH = 'high',
  CRITICAL = 'critical',
}

export enum FraudAlertStatus {
  OPEN = 'open',
  INVESTIGATING = 'investigating',
  RESOLVED = 'resolved',
  FALSE_POSITIVE = 'false_positive',
  ESCALATED = 'escalated',
}

@Entity('fraud_alert')
export class FraudAlertEntity extends BaseModel {
  @Index({ where: '"deletedAt" IS NULL' })
  @Column()
  userId: string;

  @ManyToOne(() => UserEntity, {
    onDelete: 'CASCADE',
  })
  @JoinColumn({ name: 'userId' })
  user: UserEntity;

  @Index({ where: '"deletedAt" IS NULL' })
  @Column({ nullable: true })
  kycVerificationId?: string;

  @ManyToOne(() => KycVerificationEntity, { nullable: true })
  @JoinColumn({ name: 'kycVerificationId' })
  kycVerification?: KycVerificationEntity;

  @Index({ where: '"deletedAt" IS NULL' })
  @Column({ nullable: true })
  bookingId?: string;

  @ManyToOne(() => BookingEntity, { nullable: true })
  @JoinColumn({ name: 'bookingId' })
  booking?: BookingEntity;

  @Column({
    type: 'enum',
    enum: FraudAlertType,
  })
  alertType: FraudAlertType;

  @Column({
    type: 'enum',
    enum: FraudAlertSeverity,
    default: FraudAlertSeverity.MEDIUM,
  })
  severity: FraudAlertSeverity;

  @Column({
    type: 'enum',
    enum: FraudAlertStatus,
    default: FraudAlertStatus.OPEN,
  })
  status: FraudAlertStatus;

  @Column('text')
  description: string;

  @Column('jsonb', { nullable: true })
  alertData?: {
    riskScore?: number;
    confidence?: number;
    matchedRules?: string[];
    triggerEvents?: {
      event: string;
      timestamp: Date;
      data?: any;
    }[];
    duplicateMatches?: {
      userId: string;
      similarity: number;
      matchedFields: string[];
    }[];
    watchlistMatches?: {
      name: string;
      type: string;
      confidence: number;
      source: string;
    }[];
    deviceFingerprint?: {
      deviceId: string;
      ipAddress: string;
      userAgent: string;
      location?: {
        country: string;
        city: string;
        coordinates?: [number, number];
      };
      riskFactors: string[];
    };
    behavioralIndicators?: {
      rapidActions: boolean;
      unusualPatterns: string[];
      velocityChecks: {
        metric: string;
        value: number;
        threshold: number;
      }[];
    };
    paymentAnomalies?: {
      cardFingerprint?: string;
      billingMismatch?: boolean;
      velocityViolations?: string[];
      chargebackHistory?: boolean;
    };
  };

  @Column({ nullable: true })
  assignedToUserId?: string;

  @ManyToOne(() => UserEntity, { nullable: true })
  @JoinColumn({ name: 'assignedToUserId' })
  assignedToUser?: UserEntity;

  @Column('text', { nullable: true })
  investigationNotes?: string;

  @Column('text', { nullable: true })
  resolutionNotes?: string;

  @Column({ type: 'timestamp', nullable: true })
  investigatedAt?: Date;

  @Column({ type: 'timestamp', nullable: true })
  resolvedAt?: Date;

  @Column({ type: 'timestamp', nullable: true })
  escalatedAt?: Date;

  @Column('jsonb', { nullable: true })
  actionsTaken?: {
    action: string;
    timestamp: Date;
    performedBy: string;
    details?: any;
  }[];

  @Column({ type: 'boolean', default: false })
  autoGenerated: boolean;

  @Column({ nullable: true })
  sourceSystem?: string;

  @Column({ nullable: true })
  externalReferenceId?: string;

  // Composite indexes for efficient queries
  @Index(['userId', 'status'])
  static userStatusIndex: void;

  @Index(['alertType', 'severity'])
  static typeSeverityIndex: void;

  @Index(['status', 'createdAt'])
  static statusTimeIndex: void;

  @Index(['assignedToUserId', 'status'])
  static assigneeStatusIndex: void;

  @Index(['kycVerificationId'])
  static kycVerificationIndex: void;

  protected getEntityType(): EntityType {
    return EntityType.USER;
  }
}
