import { UserEntity } from '@/auth/entities/user.entity';
import { BaseModel } from '@/database/models/base.model';
import { Column, Entity, Index, JoinColumn, ManyToOne } from 'typeorm';
import { EntityType } from '../../utils/id-generator.service';
import { BookingEntity } from './booking.entity';
import { FraudAlertEntity } from './fraud-alert.entity';
import { KycVerificationEntity } from './kyc-verification.entity';

export enum SupportMessageType {
  KYC_INQUIRY = 'kyc_inquiry',
  KYC_APPEAL = 'kyc_appeal',
  FRAUD_REPORT = 'fraud_report',
  ACCOUNT_ISSUE = 'account_issue',
  BOOKING_ISSUE = 'booking_issue',
  GENERAL_SUPPORT = 'general_support',
  ESCALATION = 'escalation',
}

export enum SupportMessageStatus {
  OPEN = 'open',
  IN_PROGRESS = 'in_progress',
  WAITING_FOR_USER = 'waiting_for_user',
  WAITING_FOR_ADMIN = 'waiting_for_admin',
  RESOLVED = 'resolved',
  CLOSED = 'closed',
  ESCALATED = 'escalated',
}

export enum SupportMessagePriority {
  LOW = 'low',
  NORMAL = 'normal',
  HIGH = 'high',
  URGENT = 'urgent',
}

export enum SupportMessageSender {
  USER = 'user',
  ADMIN = 'admin',
  SYSTEM = 'system',
}

@Entity('support_message')
export class SupportMessageEntity extends BaseModel {
  @Index({ where: '"deletedAt" IS NULL' })
  @Column()
  userId: string;

  @ManyToOne(() => UserEntity, {
    onDelete: 'CASCADE',
  })
  @JoinColumn({ name: 'userId' })
  user: UserEntity;

  @Index({ where: '"deletedAt" IS NULL' })
  @Column({ nullable: true })
  kycVerificationId?: string;

  @ManyToOne(() => KycVerificationEntity, { nullable: true })
  @JoinColumn({ name: 'kycVerificationId' })
  kycVerification?: KycVerificationEntity;

  @Index({ where: '"deletedAt" IS NULL' })
  @Column({ nullable: true })
  fraudAlertId?: string;

  @ManyToOne(() => FraudAlertEntity, { nullable: true })
  @JoinColumn({ name: 'fraudAlertId' })
  fraudAlert?: FraudAlertEntity;

  @Index({ where: '"deletedAt" IS NULL' })
  @Column({ nullable: true })
  bookingId?: string;

  @ManyToOne(() => BookingEntity, { nullable: true })
  @JoinColumn({ name: 'bookingId' })
  booking?: BookingEntity;

  @Column({ nullable: true })
  parentMessageId?: string;

  @ManyToOne(() => SupportMessageEntity, { nullable: true })
  @JoinColumn({ name: 'parentMessageId' })
  parentMessage?: SupportMessageEntity;

  @Column({
    type: 'enum',
    enum: SupportMessageType,
    default: SupportMessageType.GENERAL_SUPPORT,
  })
  messageType: SupportMessageType;

  @Column({
    type: 'enum',
    enum: SupportMessageStatus,
    default: SupportMessageStatus.OPEN,
  })
  status: SupportMessageStatus;

  @Column({
    type: 'enum',
    enum: SupportMessagePriority,
    default: SupportMessagePriority.NORMAL,
  })
  priority: SupportMessagePriority;

  @Column({
    type: 'enum',
    enum: SupportMessageSender,
  })
  sender: SupportMessageSender;

  @Column({ nullable: true })
  senderUserId?: string;

  @ManyToOne(() => UserEntity, { nullable: true })
  @JoinColumn({ name: 'senderUserId' })
  senderUser?: UserEntity;

  @Column('text')
  subject: string;

  @Column('text')
  content: string;

  @Column('jsonb', { nullable: true })
  attachments?: {
    filename: string;
    url: string;
    mimeType: string;
    size: number;
    uploadedAt: Date;
  }[];

  @Column('jsonb', { nullable: true })
  metadata?: {
    ticketNumber?: string;
    category?: string;
    subcategory?: string;
    tags?: string[];
    customerSatisfactionRating?: number;
    resolutionTime?: number; // in minutes
    escalationLevel?: number;
    internalNotes?: string;
    externalReferenceId?: string;
    sourceChannel?: 'web' | 'mobile' | 'email' | 'phone' | 'chat';
    userAgent?: string;
    ipAddress?: string;
    sessionId?: string;
  };

  @Column({ nullable: true })
  assignedToUserId?: string;

  @ManyToOne(() => UserEntity, { nullable: true })
  @JoinColumn({ name: 'assignedToUserId' })
  assignedToUser?: UserEntity;

  @Column({ type: 'timestamp', nullable: true })
  readAt?: Date;

  @Column({ type: 'timestamp', nullable: true })
  respondedAt?: Date;

  @Column({ type: 'timestamp', nullable: true })
  resolvedAt?: Date;

  @Column({ type: 'timestamp', nullable: true })
  closedAt?: Date;

  @Column({ type: 'timestamp', nullable: true })
  escalatedAt?: Date;

  @Column({ type: 'timestamp', nullable: true })
  dueAt?: Date;

  @Column({ type: 'boolean', default: false })
  isInternal: boolean;

  @Column({ type: 'boolean', default: false })
  isAutoGenerated: boolean;

  @Column('text', { nullable: true })
  adminNotes?: string;

  @Column('jsonb', { nullable: true })
  actionHistory?: {
    action: string;
    timestamp: Date;
    performedBy: string;
    details?: any;
  }[];

  // Composite indexes for efficient queries
  @Index(['userId', 'status'])
  static userStatusIndex: void;

  @Index(['messageType', 'status'])
  static typeStatusIndex: void;

  @Index(['status', 'priority', 'createdAt'])
  static statusPriorityTimeIndex: void;

  @Index(['assignedToUserId', 'status'])
  static assigneeStatusIndex: void;

  @Index(['kycVerificationId'])
  static kycVerificationIndex: void;

  @Index(['fraudAlertId'])
  static fraudAlertIndex: void;

  @Index(['parentMessageId'])
  static parentMessageIndex: void;

  protected getEntityType(): EntityType {
    return EntityType.USER;
  }
}
