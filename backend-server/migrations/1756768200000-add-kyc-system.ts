import { MigrationInterface, QueryRunner } from 'typeorm';

export class AddKycSystem1756768200000 implements MigrationInterface {
  name = 'AddKycSystem1756768200000';

  public async up(queryRunner: QueryRunner): Promise<void> {
    // Create KYC verification table
    await queryRunner.query(`
      CREATE TYPE "public"."kyc_verification_status_enum" AS ENUM(
        'pending', 'in_progress', 'approved', 'rejected', 'expired', 'cancelled'
      )
    `);

    await queryRunner.query(`
      CREATE TYPE "public"."kyc_verification_provider_enum" AS ENUM(
        'jumio', 'onfido', 'veriff', 'sumsub'
      )
    `);

    await queryRunner.query(`
      CREATE TYPE "public"."kyc_verification_verification_type_enum" AS ENUM(
        'identity', 'address', 'document', 'biometric'
      )
    `);

    await queryRunner.query(`
      CREATE TABLE "kyc_verification" (
        "id" uuid NOT NULL DEFAULT uuid_generate_v4(),
        "createdAt" TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "deletedAt" TIMESTAMP,
        "userId" uuid NOT NULL,
        "bookingId" uuid,
        "status" "public"."kyc_verification_status_enum" NOT NULL DEFAULT 'pending',
        "provider" "public"."kyc_verification_provider_enum" NOT NULL,
        "verificationType" "public"."kyc_verification_verification_type_enum" NOT NULL DEFAULT 'identity',
        "providerTransactionId" character varying,
        "providerSessionId" character varying,
        "providerData" jsonb,
        "verificationResult" jsonb,
        "rejectionReason" text,
        "fraudChecks" jsonb,
        "cost" numeric(10,2),
        "currency" character varying(3) NOT NULL DEFAULT 'USD',
        "submittedAt" TIMESTAMP,
        "completedAt" TIMESTAMP,
        "expiresAt" TIMESTAMP,
        "adminNotes" text,
        "internalNotes" text,
        CONSTRAINT "PK_kyc_verification" PRIMARY KEY ("id")
      )
    `);

    // Create fraud alert table
    await queryRunner.query(`
      CREATE TYPE "public"."fraud_alert_alert_type_enum" AS ENUM(
        'duplicate_identity', 'suspicious_document', 'watchlist_match', 
        'device_fingerprint', 'behavioral_anomaly', 'payment_fraud', 
        'account_takeover', 'synthetic_identity'
      )
    `);

    await queryRunner.query(`
      CREATE TYPE "public"."fraud_alert_severity_enum" AS ENUM(
        'low', 'medium', 'high', 'critical'
      )
    `);

    await queryRunner.query(`
      CREATE TYPE "public"."fraud_alert_status_enum" AS ENUM(
        'open', 'investigating', 'resolved', 'false_positive', 'escalated'
      )
    `);

    await queryRunner.query(`
      CREATE TABLE "fraud_alert" (
        "id" uuid NOT NULL DEFAULT uuid_generate_v4(),
        "createdAt" TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "deletedAt" TIMESTAMP,
        "userId" uuid NOT NULL,
        "kycVerificationId" uuid,
        "bookingId" uuid,
        "alertType" "public"."fraud_alert_alert_type_enum" NOT NULL,
        "severity" "public"."fraud_alert_severity_enum" NOT NULL DEFAULT 'medium',
        "status" "public"."fraud_alert_status_enum" NOT NULL DEFAULT 'open',
        "description" text NOT NULL,
        "alertData" jsonb,
        "assignedToUserId" uuid,
        "investigationNotes" text,
        "resolutionNotes" text,
        "investigatedAt" TIMESTAMP,
        "resolvedAt" TIMESTAMP,
        "escalatedAt" TIMESTAMP,
        "actionsTaken" jsonb,
        "autoGenerated" boolean NOT NULL DEFAULT false,
        "sourceSystem" character varying,
        "externalReferenceId" character varying,
        CONSTRAINT "PK_fraud_alert" PRIMARY KEY ("id")
      )
    `);

    // Create support message table
    await queryRunner.query(`
      CREATE TYPE "public"."support_message_message_type_enum" AS ENUM(
        'kyc_inquiry', 'kyc_appeal', 'fraud_report', 'account_issue', 
        'booking_issue', 'general_support', 'escalation'
      )
    `);

    await queryRunner.query(`
      CREATE TYPE "public"."support_message_status_enum" AS ENUM(
        'open', 'in_progress', 'waiting_for_user', 'waiting_for_admin', 
        'resolved', 'closed', 'escalated'
      )
    `);

    await queryRunner.query(`
      CREATE TYPE "public"."support_message_priority_enum" AS ENUM(
        'low', 'normal', 'high', 'urgent'
      )
    `);

    await queryRunner.query(`
      CREATE TYPE "public"."support_message_sender_enum" AS ENUM(
        'user', 'admin', 'system'
      )
    `);

    await queryRunner.query(`
      CREATE TABLE "support_message" (
        "id" uuid NOT NULL DEFAULT uuid_generate_v4(),
        "createdAt" TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "deletedAt" TIMESTAMP,
        "userId" uuid NOT NULL,
        "kycVerificationId" uuid,
        "fraudAlertId" uuid,
        "bookingId" uuid,
        "parentMessageId" uuid,
        "messageType" "public"."support_message_message_type_enum" NOT NULL DEFAULT 'general_support',
        "status" "public"."support_message_status_enum" NOT NULL DEFAULT 'open',
        "priority" "public"."support_message_priority_enum" NOT NULL DEFAULT 'normal',
        "sender" "public"."support_message_sender_enum" NOT NULL,
        "senderUserId" uuid,
        "subject" text NOT NULL,
        "content" text NOT NULL,
        "attachments" jsonb,
        "metadata" jsonb,
        "assignedToUserId" uuid,
        "readAt" TIMESTAMP,
        "respondedAt" TIMESTAMP,
        "resolvedAt" TIMESTAMP,
        "closedAt" TIMESTAMP,
        "escalatedAt" TIMESTAMP,
        "dueAt" TIMESTAMP,
        "isInternal" boolean NOT NULL DEFAULT false,
        "isAutoGenerated" boolean NOT NULL DEFAULT false,
        "adminNotes" text,
        "actionHistory" jsonb,
        CONSTRAINT "PK_support_message" PRIMARY KEY ("id")
      )
    `);

    // Add KYC fields to user table
    await queryRunner.query(`
      ALTER TABLE "user" 
      ADD COLUMN "kycVerified" boolean NOT NULL DEFAULT false,
      ADD COLUMN "kycProvider" character varying,
      ADD COLUMN "kycVerifiedAt" TIMESTAMP,
      ADD COLUMN "kycVerificationId" character varying
    `);

    // Add KYC fields to booking table
    await queryRunner.query(`
      CREATE TYPE "public"."booking_kyc_status_enum" AS ENUM(
        'not_required', 'pending', 'in_progress', 'completed', 'failed'
      )
    `);

    await queryRunner.query(`
      ALTER TABLE "booking" 
      ADD COLUMN "kycStatus" "public"."booking_kyc_status_enum" NOT NULL DEFAULT 'not_required',
      ADD COLUMN "kycVerificationId" character varying,
      ADD COLUMN "paymentHoldId" character varying,
      ADD COLUMN "kycRequiredAt" TIMESTAMP,
      ADD COLUMN "kycCompletedAt" TIMESTAMP
    `);

    // Create indexes for kyc_verification table
    await queryRunner.query(`
      CREATE INDEX "IDX_kyc_verification_userId_deletedAt" 
      ON "kyc_verification" ("userId") 
      WHERE "deletedAt" IS NULL
    `);

    await queryRunner.query(`
      CREATE INDEX "IDX_kyc_verification_bookingId_deletedAt" 
      ON "kyc_verification" ("bookingId") 
      WHERE "deletedAt" IS NULL
    `);

    await queryRunner.query(`
      CREATE INDEX "IDX_kyc_verification_userId_status" 
      ON "kyc_verification" ("userId", "status")
    `);

    await queryRunner.query(`
      CREATE INDEX "IDX_kyc_verification_provider_status" 
      ON "kyc_verification" ("provider", "status")
    `);

    await queryRunner.query(`
      CREATE INDEX "IDX_kyc_verification_bookingId_status" 
      ON "kyc_verification" ("bookingId", "status")
    `);

    await queryRunner.query(`
      CREATE INDEX "IDX_kyc_verification_status_createdAt" 
      ON "kyc_verification" ("status", "createdAt")
    `);

    // Create indexes for fraud_alert table
    await queryRunner.query(`
      CREATE INDEX "IDX_fraud_alert_userId_deletedAt" 
      ON "fraud_alert" ("userId") 
      WHERE "deletedAt" IS NULL
    `);

    await queryRunner.query(`
      CREATE INDEX "IDX_fraud_alert_kycVerificationId_deletedAt" 
      ON "fraud_alert" ("kycVerificationId") 
      WHERE "deletedAt" IS NULL
    `);

    await queryRunner.query(`
      CREATE INDEX "IDX_fraud_alert_bookingId_deletedAt" 
      ON "fraud_alert" ("bookingId") 
      WHERE "deletedAt" IS NULL
    `);

    await queryRunner.query(`
      CREATE INDEX "IDX_fraud_alert_userId_status" 
      ON "fraud_alert" ("userId", "status")
    `);

    await queryRunner.query(`
      CREATE INDEX "IDX_fraud_alert_alertType_severity" 
      ON "fraud_alert" ("alertType", "severity")
    `);

    await queryRunner.query(`
      CREATE INDEX "IDX_fraud_alert_status_createdAt" 
      ON "fraud_alert" ("status", "createdAt")
    `);

    await queryRunner.query(`
      CREATE INDEX "IDX_fraud_alert_assignedToUserId_status" 
      ON "fraud_alert" ("assignedToUserId", "status")
    `);

    // Create indexes for support_message table
    await queryRunner.query(`
      CREATE INDEX "IDX_support_message_userId_deletedAt" 
      ON "support_message" ("userId") 
      WHERE "deletedAt" IS NULL
    `);

    await queryRunner.query(`
      CREATE INDEX "IDX_support_message_kycVerificationId_deletedAt" 
      ON "support_message" ("kycVerificationId") 
      WHERE "deletedAt" IS NULL
    `);

    await queryRunner.query(`
      CREATE INDEX "IDX_support_message_fraudAlertId_deletedAt" 
      ON "support_message" ("fraudAlertId") 
      WHERE "deletedAt" IS NULL
    `);

    await queryRunner.query(`
      CREATE INDEX "IDX_support_message_bookingId_deletedAt" 
      ON "support_message" ("bookingId") 
      WHERE "deletedAt" IS NULL
    `);

    await queryRunner.query(`
      CREATE INDEX "IDX_support_message_userId_status" 
      ON "support_message" ("userId", "status")
    `);

    await queryRunner.query(`
      CREATE INDEX "IDX_support_message_messageType_status" 
      ON "support_message" ("messageType", "status")
    `);

    await queryRunner.query(`
      CREATE INDEX "IDX_support_message_status_priority_createdAt" 
      ON "support_message" ("status", "priority", "createdAt")
    `);

    await queryRunner.query(`
      CREATE INDEX "IDX_support_message_assignedToUserId_status" 
      ON "support_message" ("assignedToUserId", "status")
    `);

    await queryRunner.query(`
      CREATE INDEX "IDX_support_message_parentMessageId" 
      ON "support_message" ("parentMessageId")
    `);

    // Create index for booking KYC status
    await queryRunner.query(`
      CREATE INDEX "IDX_booking_kycStatus_createdAt" 
      ON "booking" ("kycStatus", "createdAt")
    `);

    // Add foreign key constraints
    await queryRunner.query(`
      ALTER TABLE "kyc_verification" 
      ADD CONSTRAINT "FK_kyc_verification_userId" 
      FOREIGN KEY ("userId") REFERENCES "user"("id") ON DELETE CASCADE
    `);

    await queryRunner.query(`
      ALTER TABLE "kyc_verification" 
      ADD CONSTRAINT "FK_kyc_verification_bookingId" 
      FOREIGN KEY ("bookingId") REFERENCES "booking"("id") ON DELETE SET NULL
    `);

    await queryRunner.query(`
      ALTER TABLE "fraud_alert" 
      ADD CONSTRAINT "FK_fraud_alert_userId" 
      FOREIGN KEY ("userId") REFERENCES "user"("id") ON DELETE CASCADE
    `);

    await queryRunner.query(`
      ALTER TABLE "fraud_alert" 
      ADD CONSTRAINT "FK_fraud_alert_kycVerificationId" 
      FOREIGN KEY ("kycVerificationId") REFERENCES "kyc_verification"("id") ON DELETE SET NULL
    `);

    await queryRunner.query(`
      ALTER TABLE "fraud_alert" 
      ADD CONSTRAINT "FK_fraud_alert_bookingId" 
      FOREIGN KEY ("bookingId") REFERENCES "booking"("id") ON DELETE SET NULL
    `);

    await queryRunner.query(`
      ALTER TABLE "fraud_alert" 
      ADD CONSTRAINT "FK_fraud_alert_assignedToUserId" 
      FOREIGN KEY ("assignedToUserId") REFERENCES "user"("id") ON DELETE SET NULL
    `);

    await queryRunner.query(`
      ALTER TABLE "support_message" 
      ADD CONSTRAINT "FK_support_message_userId" 
      FOREIGN KEY ("userId") REFERENCES "user"("id") ON DELETE CASCADE
    `);

    await queryRunner.query(`
      ALTER TABLE "support_message" 
      ADD CONSTRAINT "FK_support_message_kycVerificationId" 
      FOREIGN KEY ("kycVerificationId") REFERENCES "kyc_verification"("id") ON DELETE SET NULL
    `);

    await queryRunner.query(`
      ALTER TABLE "support_message" 
      ADD CONSTRAINT "FK_support_message_fraudAlertId" 
      FOREIGN KEY ("fraudAlertId") REFERENCES "fraud_alert"("id") ON DELETE SET NULL
    `);

    await queryRunner.query(`
      ALTER TABLE "support_message" 
      ADD CONSTRAINT "FK_support_message_bookingId" 
      FOREIGN KEY ("bookingId") REFERENCES "booking"("id") ON DELETE SET NULL
    `);

    await queryRunner.query(`
      ALTER TABLE "support_message" 
      ADD CONSTRAINT "FK_support_message_parentMessageId" 
      FOREIGN KEY ("parentMessageId") REFERENCES "support_message"("id") ON DELETE SET NULL
    `);

    await queryRunner.query(`
      ALTER TABLE "support_message" 
      ADD CONSTRAINT "FK_support_message_senderUserId" 
      FOREIGN KEY ("senderUserId") REFERENCES "user"("id") ON DELETE SET NULL
    `);

    await queryRunner.query(`
      ALTER TABLE "support_message" 
      ADD CONSTRAINT "FK_support_message_assignedToUserId" 
      FOREIGN KEY ("assignedToUserId") REFERENCES "user"("id") ON DELETE SET NULL
    `);
  }

  public async down(queryRunner: QueryRunner): Promise<void> {
    // Drop foreign key constraints
    await queryRunner.query(`ALTER TABLE "support_message" DROP CONSTRAINT "FK_support_message_assignedToUserId"`);
    await queryRunner.query(`ALTER TABLE "support_message" DROP CONSTRAINT "FK_support_message_senderUserId"`);
    await queryRunner.query(`ALTER TABLE "support_message" DROP CONSTRAINT "FK_support_message_parentMessageId"`);
    await queryRunner.query(`ALTER TABLE "support_message" DROP CONSTRAINT "FK_support_message_bookingId"`);
    await queryRunner.query(`ALTER TABLE "support_message" DROP CONSTRAINT "FK_support_message_fraudAlertId"`);
    await queryRunner.query(`ALTER TABLE "support_message" DROP CONSTRAINT "FK_support_message_kycVerificationId"`);
    await queryRunner.query(`ALTER TABLE "support_message" DROP CONSTRAINT "FK_support_message_userId"`);
    await queryRunner.query(`ALTER TABLE "fraud_alert" DROP CONSTRAINT "FK_fraud_alert_assignedToUserId"`);
    await queryRunner.query(`ALTER TABLE "fraud_alert" DROP CONSTRAINT "FK_fraud_alert_bookingId"`);
    await queryRunner.query(`ALTER TABLE "fraud_alert" DROP CONSTRAINT "FK_fraud_alert_kycVerificationId"`);
    await queryRunner.query(`ALTER TABLE "fraud_alert" DROP CONSTRAINT "FK_fraud_alert_userId"`);
    await queryRunner.query(`ALTER TABLE "kyc_verification" DROP CONSTRAINT "FK_kyc_verification_bookingId"`);
    await queryRunner.query(`ALTER TABLE "kyc_verification" DROP CONSTRAINT "FK_kyc_verification_userId"`);

    // Drop indexes
    await queryRunner.query(`DROP INDEX "IDX_booking_kycStatus_createdAt"`);
    await queryRunner.query(`DROP INDEX "IDX_support_message_parentMessageId"`);
    await queryRunner.query(`DROP INDEX "IDX_support_message_assignedToUserId_status"`);
    await queryRunner.query(`DROP INDEX "IDX_support_message_status_priority_createdAt"`);
    await queryRunner.query(`DROP INDEX "IDX_support_message_messageType_status"`);
    await queryRunner.query(`DROP INDEX "IDX_support_message_userId_status"`);
    await queryRunner.query(`DROP INDEX "IDX_support_message_bookingId_deletedAt"`);
    await queryRunner.query(`DROP INDEX "IDX_support_message_fraudAlertId_deletedAt"`);
    await queryRunner.query(`DROP INDEX "IDX_support_message_kycVerificationId_deletedAt"`);
    await queryRunner.query(`DROP INDEX "IDX_support_message_userId_deletedAt"`);
    await queryRunner.query(`DROP INDEX "IDX_fraud_alert_assignedToUserId_status"`);
    await queryRunner.query(`DROP INDEX "IDX_fraud_alert_status_createdAt"`);
    await queryRunner.query(`DROP INDEX "IDX_fraud_alert_alertType_severity"`);
    await queryRunner.query(`DROP INDEX "IDX_fraud_alert_userId_status"`);
    await queryRunner.query(`DROP INDEX "IDX_fraud_alert_bookingId_deletedAt"`);
    await queryRunner.query(`DROP INDEX "IDX_fraud_alert_kycVerificationId_deletedAt"`);
    await queryRunner.query(`DROP INDEX "IDX_fraud_alert_userId_deletedAt"`);
    await queryRunner.query(`DROP INDEX "IDX_kyc_verification_status_createdAt"`);
    await queryRunner.query(`DROP INDEX "IDX_kyc_verification_bookingId_status"`);
    await queryRunner.query(`DROP INDEX "IDX_kyc_verification_provider_status"`);
    await queryRunner.query(`DROP INDEX "IDX_kyc_verification_userId_status"`);
    await queryRunner.query(`DROP INDEX "IDX_kyc_verification_bookingId_deletedAt"`);
    await queryRunner.query(`DROP INDEX "IDX_kyc_verification_userId_deletedAt"`);

    // Remove KYC fields from booking table
    await queryRunner.query(`
      ALTER TABLE "booking" 
      DROP COLUMN "kycCompletedAt",
      DROP COLUMN "kycRequiredAt",
      DROP COLUMN "paymentHoldId",
      DROP COLUMN "kycVerificationId",
      DROP COLUMN "kycStatus"
    `);

    await queryRunner.query(`DROP TYPE "public"."booking_kyc_status_enum"`);

    // Remove KYC fields from user table
    await queryRunner.query(`
      ALTER TABLE "user" 
      DROP COLUMN "kycVerificationId",
      DROP COLUMN "kycVerifiedAt",
      DROP COLUMN "kycProvider",
      DROP COLUMN "kycVerified"
    `);

    // Drop tables
    await queryRunner.query(`DROP TABLE "support_message"`);
    await queryRunner.query(`DROP TABLE "fraud_alert"`);
    await queryRunner.query(`DROP TABLE "kyc_verification"`);

    // Drop enums
    await queryRunner.query(`DROP TYPE "public"."support_message_sender_enum"`);
    await queryRunner.query(`DROP TYPE "public"."support_message_priority_enum"`);
    await queryRunner.query(`DROP TYPE "public"."support_message_status_enum"`);
    await queryRunner.query(`DROP TYPE "public"."support_message_message_type_enum"`);
    await queryRunner.query(`DROP TYPE "public"."fraud_alert_status_enum"`);
    await queryRunner.query(`DROP TYPE "public"."fraud_alert_severity_enum"`);
    await queryRunner.query(`DROP TYPE "public"."fraud_alert_alert_type_enum"`);
    await queryRunner.query(`DROP TYPE "public"."kyc_verification_verification_type_enum"`);
    await queryRunner.query(`DROP TYPE "public"."kyc_verification_provider_enum"`);
    await queryRunner.query(`DROP TYPE "public"."kyc_verification_status_enum"`);
  }
}